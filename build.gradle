plugins {
	id 'fabric-loom' version '1.11.+'
	id "com.modrinth.minotaur" version "2.+"
	id 'maven-publish'
}


sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

archivesBaseName = project.archives_base_name
group = project.maven_group

if (System.getenv("CI") != null) {
	if (System.getenv("RELEASE") != null) {
		version = project.mod_version
	} else {
		version = project.mod_version + "-dev.build." + System.getenv("GITHUB_RUN_NUMBER")
	}
} else {
	version = project.mod_version + "-dev.local"
}

version = version + "+" + project.minecraft_version

loom {
	runs {
		datagen {
			server()
			name = "Data Generation"
			runDir = "build/datagen"
			vmArg("-Dfabric-api.datagen")
			vmArg("-Dfabric-api.datagen.modid=polydecorations")
			vmArg("-Dfabric-api.datagen.output-dir=${file("src/main/generated")}")
		}
	}
	accessWidenerPath = file("src/main/resources/polydecorations.accesswidener")

}


sourceSets {
	main {
		resources {
			srcDirs += [
					"src/main/generated"
			]
		}
	}
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven { url 'https://maven.nucleoid.xyz' }
	maven { url 'https://kneelawk.com/maven' }
	maven { url "https://maven.alexiil.uk/" }
	maven { url "https://api.modrinth.com/maven/" }
	maven { url = "https://jitpack.io" }
	maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }

	mavenLocal()
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation 'eu.pb4:polymer-core:0.14.0-rc.2+1.21.9-rc1'
	modImplementation 'eu.pb4:polymer-blocks:0.14.0-rc.2+1.21.9-rc1'
	modImplementation 'eu.pb4:polymer-resource-pack:0.14.0-rc.2+1.21.9-rc1'
	modImplementation 'eu.pb4:polymer-resource-pack-extras:0.14.0-rc.2+1.21.9-rc1'
	modImplementation 'eu.pb4:polymer-autohost:0.14.0-rc.2+1.21.9-rc1'
	modImplementation 'eu.pb4:polymer-virtual-entity:0.14.0-rc.2+1.21.9-rc1'
	modImplementation include('eu.pb4:common-protection-api:1.0.0')
	modImplementation include('eu.pb4:sgui:1.11.0+1.21.9')
	modImplementation include('eu.pb4:map-canvas-api:0.6.0+1.21.9')
	modImplementation include('eu.pb4:factorytools:0.8.0+1.21.9')

	// Temp hack to allow development
	//modImplementation include('com.kneelawk:graphlib:1.99.99+1.20.local')
	//modImplementation include('alexiil.mc.lib:libnetworkstack-base:0.11.0-aaa.patbox')

	modCompileOnly 'maven.modrinth:polydex:1.3.0+1.21.2'

	// Uncomment the following line to enable the deprecated Fabric API modules. 
	// These are included in the Fabric API production distribution and allow you to update your mod to the latest modules at a later more convenient time.

	// modImplementation "net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

if (System.getenv("MODRINTH")) {
	modrinth {
		token = System.getenv("MODRINTH")
		projectId = '5710VC7f'// The ID of your modrinth project, slugs will not work.
		versionNumber = "" + version // The version of the mod to upload.
		versionType = "release"
		uploadFile = remapJar // This links to a task that builds your mod jar and sets "uploadFile" to the mod jar.
		gameVersions = [((String) project.minecraft_version)]
		changelog = System.getenv("CHANGELOG")
		loaders = ["fabric"/*, "quilt"*/]

		dependencies {
			required.project "polymer"
			optional.project "armorstandeditor"
		}
	}

	remapJar {
		finalizedBy project.tasks.modrinth
	}
}
